{"ast":null,"code":"/**\r\n * Serviço de autenticação responsável pela comunicação\r\n * com a API backend para operações de login e autenticação\r\n * Gerencia requisições HTTP e tratamento de erros\r\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\nclass AuthService {\n  /**\r\n   * Realiza requisição de login para a API backend\r\n   */\n  static async login(email, senha) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          senha\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Erro no serviço de login:', error);\n      throw new Error('Erro de conexão com o servidor');\n    }\n  }\n\n  /**\r\n   * Verifica se um email existe no sistema\r\n   */\n  static async verifyEmail(email) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/verify-email`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Erro ao verificar email:', error);\n      throw new Error('Erro de conexão com o servidor');\n    }\n  }\n\n  /**\r\n   * Busca colaboradores por termo de pesquisa\r\n   */\n  static async searchCollaborators(searchTerm) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/search-collaborators?search=${encodeURIComponent(searchTerm)}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Erro ao buscar colaboradores:', error);\n      throw new Error('Erro de conexão com o servidor');\n    }\n  }\n}\nexport default AuthService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AuthService","login","email","senha","response","fetch","method","headers","body","JSON","stringify","json","error","console","Error","verifyEmail","searchCollaborators","searchTerm","encodeURIComponent"],"sources":["C:/Users/CTT/Desktop/StartTech/frontend/src/services/authService.js"],"sourcesContent":["/**\r\n * Serviço de autenticação responsável pela comunicação\r\n * com a API backend para operações de login e autenticação\r\n * Gerencia requisições HTTP e tratamento de erros\r\n */\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\r\n\r\nclass AuthService {\r\n  /**\r\n   * Realiza requisição de login para a API backend\r\n   */\r\n  static async login(email, senha) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, senha })\r\n      });\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Erro no serviço de login:', error);\r\n      throw new Error('Erro de conexão com o servidor');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica se um email existe no sistema\r\n   */\r\n  static async verifyEmail(email) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/verify-email`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email })\r\n      });\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Erro ao verificar email:', error);\r\n      throw new Error('Erro de conexão com o servidor');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca colaboradores por termo de pesquisa\r\n   */\r\n  static async searchCollaborators(searchTerm) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/search-collaborators?search=${encodeURIComponent(searchTerm)}`);\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Erro ao buscar colaboradores:', error);\r\n      throw new Error('Erro de conexão com o servidor');\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthService;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,MAAM;AAE5D,MAAMC,WAAW,CAAC;EAChB;AACF;AACA;EACE,aAAaC,KAAKA,CAACC,KAAK,EAAEC,KAAK,EAAE;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,YAAY,aAAa,EAAE;QACzDU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAM,CAAC;MACvC,CAAC,CAAC;MAEF,OAAO,MAAMC,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAM,IAAIE,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF;;EAEA;AACF;AACA;EACE,aAAaC,WAAWA,CAACb,KAAK,EAAE;IAC9B,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,YAAY,oBAAoB,EAAE;QAChEU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER;QAAM,CAAC;MAChC,CAAC,CAAC;MAEF,OAAO,MAAME,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAM,IAAIE,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF;;EAEA;AACF;AACA;EACE,aAAaE,mBAAmBA,CAACC,UAAU,EAAE;IAC3C,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,YAAY,qCAAqCsB,kBAAkB,CAACD,UAAU,CAAC,EAAE,CAAC;MAClH,OAAO,MAAMb,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAM,IAAIE,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF;AACF;AAEA,eAAed,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}